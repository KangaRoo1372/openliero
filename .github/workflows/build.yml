---

name: Build

on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

env:
  SCCACHE_GHA_ENABLED: true

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        include:
          - name: linux
            os: ubuntu-latest
            workflow_preset: linux-x64-ci
          - name: windows
            os: windows-latest
            workflow_preset: windows-x64-ci
          - name: macos
            os: macos-latest
            workflow_preset: windows-arm64-ci

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libx11-dev \
            libxft-dev \
            libxext-dev \
            libwayland-dev \
            libxkbcommon-dev \
            libegl1-mesa-dev \
            libibus-1.0-dev \
            libasound2-dev \
            libpulse-dev \
            libaudio-dev \
            libjack-dev \
            libsndio-dev

      - name: Get cmake/ninja
        uses: lukka/get-cmake@latest

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/tools/vcpkg/vcpkg'
          vcpkgConfigurationJsonGlob: 'vcpkg-configuration.json'

      - name: Run cmake
        uses: lukka/run-cmake@v10
        with:
          workflowPreset: '${{ matrix.workflow_preset }}'

        # build x86_64 binaries so we can create
        # universal binaries for macOS
      - name: Run cmake (macos-x64)
        if: runner.os == 'macos'
        uses: lukka/run-cmake@v10
        with:
          workflowPreset: 'macos-x64-ci'

      - name: Create build artifact (Linux)
        if: runner.os == 'linux'
        run: |
          cmake --install build/linux-x64-ci
          cd install/linux-x64-ci
          tar cvf ../openliero-linux-x64.tar.gz .

      - name: Create build artifact (macOS)
        if: runner.os == 'macos'
        run: |
          cmake --install build/macos-arm64-ci
          cmake --install build/macos-x64-ci
          lipo -create \
            -output install/openliero \
            install/macos-arm64-ci/openliero \
            install/macos-x64-ci/openliero
          lipo -create \
            -output install/tctool \
            install/macos-arm64-ci/tctool \
            install/macos-x64-ci/tctool
          mv -f install/{openliero,tctool} install/macos-arm64-ci
          cd install/macos-arm64-ci
          tar cvf ../openliero-macos.tar.gz .

      - name: Create build artifact (Windows)
        if: runner.os == 'windows'
        run: |
          cmake --install build/windows-x64-ci
          Compress-Archive `
           -Path install/windows-x64-ci/* `
           -DestinationPath install/openliero-windows-x64.zip

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-build
          path: install/openliero*
